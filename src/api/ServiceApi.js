/**
 * Topcoder Meta Services REST API
 * REST API for Topcoder Meta Services.  This describes a service that can give information on other services existing on Topcoder.  Available service links can be listed by sending GET request. Also, each service can return links to further services in their responses.  ### Pagination   Requests that return multiple items will be paginated to 20 items by default. You can specify   further pages with the ```page``` parameter. You can also set a custom page   size up to 100 with the ```perPage``` parameter.    Pagination response data is included in http headers. By Default, the response header contains links with ```next```, ```last```, ```first```, ```prev``` resource links. 
 *
 * OpenAPI spec version: 5.0.0
 * Contact: support@topcoder.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Body', 'model/Body1', 'model/ExtendedService', 'model/Payload', 'model/Service'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Body'), require('../model/Body1'), require('../model/ExtendedService'), require('../model/Payload'), require('../model/Service'));
  } else {
    // Browser globals (root is window)
    if (!root.TopcoderMetaServicesRestApi) {
      root.TopcoderMetaServicesRestApi = {};
    }
    root.TopcoderMetaServicesRestApi.ServiceApi = factory(root.TopcoderMetaServicesRestApi.ApiClient, root.TopcoderMetaServicesRestApi.Body, root.TopcoderMetaServicesRestApi.Body1, root.TopcoderMetaServicesRestApi.ExtendedService, root.TopcoderMetaServicesRestApi.Payload, root.TopcoderMetaServicesRestApi.Service);
  }
}(this, function(ApiClient, Body, Body1, ExtendedService, Payload, Service) {
  'use strict';

  /**
   * Service service.
   * @module api/ServiceApi
   * @version 5.0.0
   */

  /**
   * Constructs a new ServiceApi. 
   * @alias module:api/ServiceApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createService operation.
     * @callback module:api/ServiceApi~createServiceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a service.
     * Create a new service. 
     * @param {module:model/Service} body 
     * @param {module:api/ServiceApi~createServiceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.createService = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createService");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bus/services', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createServicePayload operation.
     * @callback module:api/ServiceApi~createServicePayloadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Payload} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create the service payload.
     * Create the payload for the given service. 
     * @param {String} serviceName The service name.
     * @param {module:model/Payload} body 
     * @param {module:api/ServiceApi~createServicePayloadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Payload}
     */
    this.createServicePayload = function(serviceName, body, callback) {
      var postBody = body;

      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling createServicePayload");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createServicePayload");
      }


      var pathParams = {
        'serviceName': serviceName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Payload;

      return this.apiClient.callApi(
        '/bus/services/{serviceName}/payloads', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteService operation.
     * @callback module:api/ServiceApi~deleteServiceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the service.
     * Delete the service. 
     * @param {String} serviceName The service name.
     * @param {module:api/ServiceApi~deleteServiceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteService = function(serviceName, callback) {
      var postBody = null;

      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling deleteService");
      }


      var pathParams = {
        'serviceName': serviceName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bus/services/{serviceName}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteServicePayload operation.
     * @callback module:api/ServiceApi~deleteServicePayloadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the service payload.
     * Delete the payload for the given service. 
     * @param {String} serviceName The service name.
     * @param {String} payloadName The payload name.
     * @param {module:api/ServiceApi~deleteServicePayloadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteServicePayload = function(serviceName, payloadName, callback) {
      var postBody = null;

      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling deleteServicePayload");
      }

      // verify the required parameter 'payloadName' is set
      if (payloadName === undefined || payloadName === null) {
        throw new Error("Missing the required parameter 'payloadName' when calling deleteServicePayload");
      }


      var pathParams = {
        'serviceName': serviceName,
        'payloadName': payloadName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bus/services/{serviceName}/payloads/{payloadName}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getService operation.
     * @callback module:api/ServiceApi~getServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExtendedService} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the service.
     * Get the service by service name. 
     * @param {String} serviceName The service name.
     * @param {module:api/ServiceApi~getServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExtendedService}
     */
    this.getService = function(serviceName, callback) {
      var postBody = null;

      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling getService");
      }


      var pathParams = {
        'serviceName': serviceName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ExtendedService;

      return this.apiClient.callApi(
        '/bus/services/{serviceName}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getServicePayload operation.
     * @callback module:api/ServiceApi~getServicePayloadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Payload} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the service payload.
     * Get the payload for the given service. 
     * @param {String} serviceName The service name.
     * @param {String} payloadName The payload name.
     * @param {module:api/ServiceApi~getServicePayloadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Payload}
     */
    this.getServicePayload = function(serviceName, payloadName, callback) {
      var postBody = null;

      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling getServicePayload");
      }

      // verify the required parameter 'payloadName' is set
      if (payloadName === undefined || payloadName === null) {
        throw new Error("Missing the required parameter 'payloadName' when calling getServicePayload");
      }


      var pathParams = {
        'serviceName': serviceName,
        'payloadName': payloadName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Payload;

      return this.apiClient.callApi(
        '/bus/services/{serviceName}/payloads/{payloadName}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getServicePayloads operation.
     * @callback module:api/ServiceApi~getServicePayloadsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Payload>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search the service payloads.
     * Search payloads for the service. 
     * @param {String} serviceName The service name.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page number. (default to 1)
     * @param {Number} opts.perPage The number of items to list per page. (default to 20)
     * @param {module:api/ServiceApi~getServicePayloadsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Payload>}
     */
    this.getServicePayloads = function(serviceName, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling getServicePayloads");
      }


      var pathParams = {
        'serviceName': serviceName
      };
      var queryParams = {
        'page': opts['page'],
        'perPage': opts['perPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Payload];

      return this.apiClient.callApi(
        '/bus/services/{serviceName}/payloads', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getServices operation.
     * @callback module:api/ServiceApi~getServicesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ExtendedService>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all services.
     * Get all services. Link headers are sent back and they have rel set to prev, next, first, last and contain the relevant URL. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page number. (default to 1)
     * @param {Number} opts.perPage The number of items to list per page. (default to 20)
     * @param {module:api/ServiceApi~getServicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ExtendedService>}
     */
    this.getServices = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'perPage': opts['perPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [ExtendedService];

      return this.apiClient.callApi(
        '/bus/services', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the headService operation.
     * @callback module:api/ServiceApi~headServiceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get only response status and headers information but no response body for the endpoint.
     * Get response status and headers information for the endpoint. It does not contain response body. 
     * @param {String} serviceName The service name.
     * @param {module:api/ServiceApi~headServiceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.headService = function(serviceName, callback) {
      var postBody = null;

      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling headService");
      }


      var pathParams = {
        'serviceName': serviceName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bus/services/{serviceName}', 'HEAD',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the headServicePayload operation.
     * @callback module:api/ServiceApi~headServicePayloadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get only response status and headers information but no response body for the endpoint.
     * Get response status and headers information for the endpoint. It does not contain response body. 
     * @param {String} serviceName The service name.
     * @param {String} payloadName The payload name.
     * @param {module:api/ServiceApi~headServicePayloadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.headServicePayload = function(serviceName, payloadName, callback) {
      var postBody = null;

      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling headServicePayload");
      }

      // verify the required parameter 'payloadName' is set
      if (payloadName === undefined || payloadName === null) {
        throw new Error("Missing the required parameter 'payloadName' when calling headServicePayload");
      }


      var pathParams = {
        'serviceName': serviceName,
        'payloadName': payloadName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bus/services/{serviceName}/payloads/{payloadName}', 'HEAD',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the headServicePayloads operation.
     * @callback module:api/ServiceApi~headServicePayloadsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get only response status and headers information but no response body for the endpoint.
     * Get response status and headers information for the endpoint. The Link header is provided in the header and they have rel set to prev, next, first, last and contain the relevant URL. It does not contain response body. 
     * @param {String} serviceName The service name.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page number. (default to 1)
     * @param {Number} opts.perPage The number of items to list per page. (default to 20)
     * @param {module:api/ServiceApi~headServicePayloadsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.headServicePayloads = function(serviceName, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling headServicePayloads");
      }


      var pathParams = {
        'serviceName': serviceName
      };
      var queryParams = {
        'page': opts['page'],
        'perPage': opts['perPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bus/services/{serviceName}/payloads', 'HEAD',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the headServices operation.
     * @callback module:api/ServiceApi~headServicesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get only response status and headers information but no response body for the endpoint.
     * Get response status and headers information for the endpoint. The Link header is provided in the header and they have rel set to prev, next, first, last and contain the relevant URL. It does not contain response body. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page number. (default to 1)
     * @param {Number} opts.perPage The number of items to list per page. (default to 20)
     * @param {module:api/ServiceApi~headServicesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.headServices = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'perPage': opts['perPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bus/services', 'HEAD',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchService operation.
     * @callback module:api/ServiceApi~patchServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExtendedService} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Partially update the service.
     * Allows to partially modify the service with the provided request parameters. 
     * @param {String} serviceName The service name.
     * @param {module:model/Body} body The Service entity. 
     * @param {module:api/ServiceApi~patchServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExtendedService}
     */
    this.patchService = function(serviceName, body, callback) {
      var postBody = body;

      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling patchService");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchService");
      }


      var pathParams = {
        'serviceName': serviceName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ExtendedService;

      return this.apiClient.callApi(
        '/bus/services/{serviceName}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchServicePayload operation.
     * @callback module:api/ServiceApi~patchServicePayloadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Payload} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Partially update the payload.
     * Allows to partially modify the payload with the provided request parameters. 
     * @param {String} serviceName The service name.
     * @param {String} payloadName The payload name.
     * @param {module:model/Body1} body 
     * @param {module:api/ServiceApi~patchServicePayloadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Payload}
     */
    this.patchServicePayload = function(serviceName, payloadName, body, callback) {
      var postBody = body;

      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling patchServicePayload");
      }

      // verify the required parameter 'payloadName' is set
      if (payloadName === undefined || payloadName === null) {
        throw new Error("Missing the required parameter 'payloadName' when calling patchServicePayload");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchServicePayload");
      }


      var pathParams = {
        'serviceName': serviceName,
        'payloadName': payloadName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Payload;

      return this.apiClient.callApi(
        '/bus/services/{serviceName}/payloads/{payloadName}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateService operation.
     * @callback module:api/ServiceApi~updateServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExtendedService} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the service.
     * Update the service by service name. 
     * @param {String} serviceName The service name.
     * @param {module:model/ExtendedService} body 
     * @param {module:api/ServiceApi~updateServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExtendedService}
     */
    this.updateService = function(serviceName, body, callback) {
      var postBody = body;

      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling updateService");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateService");
      }


      var pathParams = {
        'serviceName': serviceName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ExtendedService;

      return this.apiClient.callApi(
        '/bus/services/{serviceName}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateServicePayload operation.
     * @callback module:api/ServiceApi~updateServicePayloadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Payload} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the service payload.
     * Update the payload for the given service. 
     * @param {String} serviceName The service name.
     * @param {String} payloadName The payload name.
     * @param {module:model/Payload} body 
     * @param {module:api/ServiceApi~updateServicePayloadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Payload}
     */
    this.updateServicePayload = function(serviceName, payloadName, body, callback) {
      var postBody = body;

      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling updateServicePayload");
      }

      // verify the required parameter 'payloadName' is set
      if (payloadName === undefined || payloadName === null) {
        throw new Error("Missing the required parameter 'payloadName' when calling updateServicePayload");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateServicePayload");
      }


      var pathParams = {
        'serviceName': serviceName,
        'payloadName': payloadName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Payload;

      return this.apiClient.callApi(
        '/bus/services/{serviceName}/payloads/{payloadName}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
