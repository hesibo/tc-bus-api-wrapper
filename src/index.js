/**
 * Topcoder Meta Services REST API
 * REST API for Topcoder Meta Services.  This describes a service that can give information on other services existing on Topcoder.  Available service links can be listed by sending GET request. Also, each service can return links to further services in their responses.  ### Pagination   Requests that return multiple items will be paginated to 20 items by default. You can specify   further pages with the ```page``` parameter. You can also set a custom page   size up to 100 with the ```perPage``` parameter.    Pagination response data is included in http headers. By Default, the response header contains links with ```next```, ```last```, ```first```, ```prev``` resource links. 
 *
 * OpenAPI spec version: 5.0.0
 * Contact: support@topcoder.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Accepted', 'model/BadRequest', 'model/Body', 'model/Body1', 'model/Conflict', 'model/EventPayload', 'model/Forbidden', 'model/HealthCheckStatus', 'model/NoContent', 'model/NotFound', 'model/NotModified', 'model/Payload', 'model/ServerError', 'model/Service', 'model/Unauthorized', 'model/ExtendedService', 'api/EventsApi', 'api/HealthchecksApi', 'api/PlaceholdersApi', 'api/ServiceApi', 'api/TopicsApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/Accepted'), require('./model/BadRequest'), require('./model/Body'), require('./model/Body1'), require('./model/Conflict'), require('./model/EventPayload'), require('./model/Forbidden'), require('./model/HealthCheckStatus'), require('./model/NoContent'), require('./model/NotFound'), require('./model/NotModified'), require('./model/Payload'), require('./model/ServerError'), require('./model/Service'), require('./model/Unauthorized'), require('./model/ExtendedService'), require('./api/EventsApi'), require('./api/HealthchecksApi'), require('./api/PlaceholdersApi'), require('./api/ServiceApi'), require('./api/TopicsApi'));
  }
}(function(ApiClient, Accepted, BadRequest, Body, Body1, Conflict, EventPayload, Forbidden, HealthCheckStatus, NoContent, NotFound, NotModified, Payload, ServerError, Service, Unauthorized, ExtendedService, EventsApi, HealthchecksApi, PlaceholdersApi, ServiceApi, TopicsApi) {
  'use strict';

  /**
   * REST_API_for_Topcoder_Meta_Services_This_describes_a_service_that_can_give_information_on_other_services_existing_on_Topcoder_Available_service_links_can_be_listed_by_sending_GET_request__Also_each_service_can_return_links_to_further_services_in_their_responses__Pagination__Requests_that_return_multiple_items_will_be_paginated_to_20_items_by_default__You_can_specify__further_pages_with_the_page_parameter__You_can_also_set_a_custom_page__size_up_to_100_with_the_perPage_parameter___Pagination_response_data_is_included_in_http_headers__By_Default_the_response_header_contains_links_with_next_last_first_prev_resource_links_.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var TopcoderMetaServicesRestApi = require('index'); // See note below*.
   * var xxxSvc = new TopcoderMetaServicesRestApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new TopcoderMetaServicesRestApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new TopcoderMetaServicesRestApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new TopcoderMetaServicesRestApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version 5.0.0
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The Accepted model constructor.
     * @property {module:model/Accepted}
     */
    Accepted: Accepted,
    /**
     * The BadRequest model constructor.
     * @property {module:model/BadRequest}
     */
    BadRequest: BadRequest,
    /**
     * The Body model constructor.
     * @property {module:model/Body}
     */
    Body: Body,
    /**
     * The Body1 model constructor.
     * @property {module:model/Body1}
     */
    Body1: Body1,
    /**
     * The Conflict model constructor.
     * @property {module:model/Conflict}
     */
    Conflict: Conflict,
    /**
     * The EventPayload model constructor.
     * @property {module:model/EventPayload}
     */
    EventPayload: EventPayload,
    /**
     * The Forbidden model constructor.
     * @property {module:model/Forbidden}
     */
    Forbidden: Forbidden,
    /**
     * The HealthCheckStatus model constructor.
     * @property {module:model/HealthCheckStatus}
     */
    HealthCheckStatus: HealthCheckStatus,
    /**
     * The NoContent model constructor.
     * @property {module:model/NoContent}
     */
    NoContent: NoContent,
    /**
     * The NotFound model constructor.
     * @property {module:model/NotFound}
     */
    NotFound: NotFound,
    /**
     * The NotModified model constructor.
     * @property {module:model/NotModified}
     */
    NotModified: NotModified,
    /**
     * The Payload model constructor.
     * @property {module:model/Payload}
     */
    Payload: Payload,
    /**
     * The ServerError model constructor.
     * @property {module:model/ServerError}
     */
    ServerError: ServerError,
    /**
     * The Service model constructor.
     * @property {module:model/Service}
     */
    Service: Service,
    /**
     * The Unauthorized model constructor.
     * @property {module:model/Unauthorized}
     */
    Unauthorized: Unauthorized,
    /**
     * The ExtendedService model constructor.
     * @property {module:model/ExtendedService}
     */
    ExtendedService: ExtendedService,
    /**
     * The EventsApi service constructor.
     * @property {module:api/EventsApi}
     */
    EventsApi: EventsApi,
    /**
     * The HealthchecksApi service constructor.
     * @property {module:api/HealthchecksApi}
     */
    HealthchecksApi: HealthchecksApi,
    /**
     * The PlaceholdersApi service constructor.
     * @property {module:api/PlaceholdersApi}
     */
    PlaceholdersApi: PlaceholdersApi,
    /**
     * The ServiceApi service constructor.
     * @property {module:api/ServiceApi}
     */
    ServiceApi: ServiceApi,
    /**
     * The TopicsApi service constructor.
     * @property {module:api/TopicsApi}
     */
    TopicsApi: TopicsApi
  };

  return exports;
}));
