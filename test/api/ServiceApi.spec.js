/**
 * Topcoder Meta Services REST API
 * REST API for Topcoder Meta Services.  This describes a service that can give information on other services existing on Topcoder.  Available service links can be listed by sending GET request. Also, each service can return links to further services in their responses.  ### Pagination   Requests that return multiple items will be paginated to 20 items by default. You can specify   further pages with the ```page``` parameter. You can also set a custom page   size up to 100 with the ```perPage``` parameter.    Pagination response data is included in http headers. By Default, the response header contains links with ```next```, ```last```, ```first```, ```prev``` resource links. 
 *
 * OpenAPI spec version: 5.0.0
 * Contact: support@topcoder.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TopcoderMetaServicesRestApi);
  }
}(this, function(expect, TopcoderMetaServicesRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new TopcoderMetaServicesRestApi.ServiceApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ServiceApi', function() {
    describe('createService', function() {
      it('should call createService successfully', function(done) {
        //uncomment below and update the code to test createService
        //instance.createService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createServicePayload', function() {
      it('should call createServicePayload successfully', function(done) {
        //uncomment below and update the code to test createServicePayload
        //instance.createServicePayload(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteService', function() {
      it('should call deleteService successfully', function(done) {
        //uncomment below and update the code to test deleteService
        //instance.deleteService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteServicePayload', function() {
      it('should call deleteServicePayload successfully', function(done) {
        //uncomment below and update the code to test deleteServicePayload
        //instance.deleteServicePayload(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getService', function() {
      it('should call getService successfully', function(done) {
        //uncomment below and update the code to test getService
        //instance.getService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getServicePayload', function() {
      it('should call getServicePayload successfully', function(done) {
        //uncomment below and update the code to test getServicePayload
        //instance.getServicePayload(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getServicePayloads', function() {
      it('should call getServicePayloads successfully', function(done) {
        //uncomment below and update the code to test getServicePayloads
        //instance.getServicePayloads(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getServices', function() {
      it('should call getServices successfully', function(done) {
        //uncomment below and update the code to test getServices
        //instance.getServices(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('headService', function() {
      it('should call headService successfully', function(done) {
        //uncomment below and update the code to test headService
        //instance.headService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('headServicePayload', function() {
      it('should call headServicePayload successfully', function(done) {
        //uncomment below and update the code to test headServicePayload
        //instance.headServicePayload(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('headServicePayloads', function() {
      it('should call headServicePayloads successfully', function(done) {
        //uncomment below and update the code to test headServicePayloads
        //instance.headServicePayloads(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('headServices', function() {
      it('should call headServices successfully', function(done) {
        //uncomment below and update the code to test headServices
        //instance.headServices(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchService', function() {
      it('should call patchService successfully', function(done) {
        //uncomment below and update the code to test patchService
        //instance.patchService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchServicePayload', function() {
      it('should call patchServicePayload successfully', function(done) {
        //uncomment below and update the code to test patchServicePayload
        //instance.patchServicePayload(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateService', function() {
      it('should call updateService successfully', function(done) {
        //uncomment below and update the code to test updateService
        //instance.updateService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateServicePayload', function() {
      it('should call updateServicePayload successfully', function(done) {
        //uncomment below and update the code to test updateServicePayload
        //instance.updateServicePayload(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
